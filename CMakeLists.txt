#-------------------------------------------------------------------------------------------
# PREAMBLE
#-------------------------------------------------------------------------------------------
# this project is valid for cmake 3.1 to 3.11
cmake_minimum_required(VERSION 3.1...3.11)
# fix the above syntax for cmake <3.12
if(${CMAKE_VERSION} VERSION_LESS 3.12)
  cmake_policy(VERSION ${CMAKE_VERSION})
endif()

# create the chaiscript project
project(chaiscript VERSION 6.1.0
                   DESCRIPTION "ChaiScript is one of the only embedded scripting language designed from the ground up to directly target C++ and take advantage of modern C++ development techniques, working with the developer like he expects it to work."
                   LANGUAGES CXX)

# add library interface
add_library(chaiscript INTERFACE)
# add header files
target_include_directories(chaiscript INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/include)

#-------------------------------------------------------------------------------------------
# BUILD OPTIONS
#-------------------------------------------------------------------------------------------
# add additional build options
option(MULTITHREAD_SUPPORT_ENABLED "Enable Multithreaded Support"                            ON )
option(DYNLOAD_ENABLED             "Enable Dynamic Loading Support"                          ON )
option(BUILD_MODULES               "Build Extra Modules (stl)"                               ON )
option(BUILD_SAMPLES               "Build Samples Folder"                                    OFF)
option(RUN_FUZZY_TESTS             "Run tests generated by AFL"                              OFF)
option(USE_STD_MAKE_SHARED         "Use std::make_shared instead of chaiscript::make_shared" OFF)
option(RUN_PERFORMANCE_TESTS       "Run Performance Tests"                                   OFF)
option(BUILD_IN_CPP17_MODE         "Build with C++17 flags"                                  OFF)
# set options to only show in the advanced menu
mark_as_advanced(USE_STD_MAKE_SHARED)
# add preprocessor directive if necessary
if(USE_STD_MAKE_SHARED)
  target_compile_definitions(chaiscript INTERFACE CHAISCRIPT_USE_STD_MAKE_SHARED)
endif()

# add even more build options when using clang or gcc
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  # add coverage reporting
  option(ENABLE_COVERAGE "Enable Coverage Reporting" OFF)
  if(ENABLE_COVERAGE)
    target_compile_options(chaiscript INTERFACE --coverage -O0)
    target_link_libraries(chaiscript INTERFACE --coverage)
  endif()

  # add thread sanitizer
  option(ENABLE_THREAD_SANITIZER "Enable thread sanitizer" OFF)
  if(ENABLE_THREAD_SANITIZER)
    target_compile_options(chaiscript INTERFACE -fsanitize=thread -g)
    target_link_libraries(chaiscript INTERFACE -fsanitize=thread)
  endif()

  # add address sanitizer
  option(ENABLE_ADDRESS_SANITIZER "Enable address sanitizer " OFF)
  if(ENABLE_ADDRESS_SANITIZER)
    target_compile_options(chaiscript INTERFACE -fsanitize=address -g)
    target_link_libraries(chaiscript INTERFACE -fsanitize=address)
    option(BUILD_LIBFUZZ_TESTER "Build libfuzzer tool" OFF)
  endif()

  # add memory sanitizer
  option(ENABLE_MEMORY_SANITIZER "Enable memory sanitizer" OFF)
  if(ENABLE_MEMORY_SANITIZER)
    target_compile_options(chaiscript INTERFACE -fsanitize=memory -fsanitize-memory-track-origins -g)
    target_link_libraries(chaiscript INTERFACE -fsanitize=memory -fsanitize-memory-track-origins)
  endif()

  # add undefined behavior sanitizer
  option(ENABLE_UNDEFINED_SANITIZER "Enable undefined behavior sanitizer" OFF)
  if(ENABLE_UNDEFINED_SANITIZER)
    target_compile_options(chaiscript INTERFACE -fsanitize=undefined -g)
    target_link_libraries(chaiscript INTERFACE -fsanitize=undefined)
  endif()

  # add link time optimization
  option(ENABLE_LTO "Enable Link Time Optimization" OFF)
  if (ENABLE_LTO)
    target_compile_options(chaiscript INTERFACE -flto)
    target_link_libraries(chaiscript INTERFACE -flto)
  endif()

  # add gprof
  option(GPROF_OUTPUT "Generate profile data" OFF)
  if (GPROF_OUTPUT)
    target_compile_options(chaiscript INTERFACE -pg)
    target_link_libraries(chaiscript INTERFACE -pg)
  endif()

  # add fprofile
  option(PROFILE_GENERATE "Generate profile data" OFF)
  if (PROFILE_GENERATE)
    target_compile_options(chaiscript INTERFACE -fprofile-generate)
    target_link_libraries(chaiscript INTERFACE -fprofile-generate)
  endif()

  # use profile data
  option(PROFILE_USE "Use profile data" OFF)
  if (PROFILE_USE)
    target_compile_options(chaiscript INTERFACE -fprofile-use)
    target_link_libraries(chaiscript INTERFACE -fprofile-use)
  endif()
endif()
# add additional build options when using clang
if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND UNIX)
  # use clangs libc++
  option(USE_LIBCXX "Use clang's libcxx" ON)
  if(USE_LIBCXX)
    target_compile_options(chaiscript INTERFACE -stdlib=libc++)
    target_link_libraries(chaiscript INTERFACE -stdlib=libc++)
  endif()
endif()

#-------------------------------------------------------------------------------------------
# COMPILER SETTINGS
#-------------------------------------------------------------------------------------------
# set compiler flags
if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  # warnings
  target_compile_options(chaiscript INTERFACE -Wall -Wextra -Wconversion
                                              -Wshadow -Wnon-virtual-dtor
                                              -Wold-style-cast -Wcast-align
                                              -Wcast-qual -Wunused
                                              -Woverloaded-virtual -Wpedantic)
  # enable even more warnings in clang
  if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    target_compile_options(chaiscript INTERFACE -Weverything -Wno-c++98-compat-pedantic
                                                -Wno-c++98-compat -Wno-documentation
                                                -Wno-switch-enum -Wno-weak-vtables
                                                -Wno-missing-prototypes -Wno-padded
                                                -Wno-missing-noreturn
                                                -Wno-exit-time-destructors
                                                -Wno-documentation-unknown-command
                                                -Wno-unused-template -Wno-range-loop-analysis)
  endif()
  # disable warnings in gcc
  if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    target_compile_options(chaiscript INTERFACE -Wnoexcept)
  endif()
  # disable warnings on apple
  if (APPLE)
    target_compile_options(chaiscript INTERFACE -Wno-sign-compare)
  endif()
  # enable c++17
  if (BUILD_IN_CPP17_MODE)
    target_compile_options(chaiscript INTERFACE -std=c++1z)
  endif()
  # prevent clang on windows from importing min/max from windows headers
  target_compile_definitions(chaiscript INTERFACE NOMINMAX)
  # add multithreading under linux
  if (UNIX)
    target_link_libraries(chaiscript INTERFACE -pthread -ldl)
  endif()
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # warnings
    target_compile_options(chaiscript INTERFACE /W4
                                                /w14545 /w34242 /w34254 /w34287
                                                /w44263 /w44265 /w44296 /w44311
                                                /w44826 /we4289 /w14546 /w14547
                                                /w14549 /w14555 /w14619 /w14905
                                                /w14906 /w14928)
    # disable unknown pragma warnings
    target_compile_options(chaiscript INTERFACE /wd4068)
    # enable x64 support
    target_compile_options(chaiscript INTERFACE /bigobj)
    # reduce msvc horror
    target_compile_options(chaiscript INTERFACE /permissive-)
    # enable c++17
    if (BUILD_IN_CPP17_MODE)
      target_compile_options(chaiscript INTERFACE /std:c++17)
    endif()
    # fix older msvc versions
    if (MSVC_VERSION STREQUAL "1800")
      # VS2013 doesn't have magic statics
      target_compile_options(chaiscript INTERFACE /w44640)
    else()
      # enum warnings are too noisy on MSVC2013
      target_compile_options(chaiscript INTERFACE /w34062)
    endif()
    # Note on MSVC compiler flags.
    # The code base selective disables warnings as necessary when the compiler is complaining too much
    # about something that is perfectly valid, or there is simply no technical way around it
    # This particular warning, C4503 is in regards to the decorated names that MSVC generates internally.
    # The error did not come up until the move to C++11, but the compiler doesn't give enough information
    # to determine where the error is coming from, and the internet provides no real information for
    # how to workaround or fix the error. So I'm disabling it globally.
    target_compile_options(chaiscript INTERFACE /wd4503)
    # prevent msvc from importing min/max from windows headers
    target_compile_definitions(chaiscript INTERFACE NOMINMAX)
endif()
