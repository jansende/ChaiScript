#this project is valid for cmake 3.1 to 3.11
cmake_minimum_required(VERSION 3.1...3.11)
#fix the above syntax for cmake <3.12
if(${CMAKE_VERSION} VERSION_LESS 3.12)
    cmake_policy(VERSION ${CMAKE_VERSION})
endif()

#create the chaiscript project
project(chaiscript VERSION 6.1.0
                   DESCRIPTION "ChaiScript is one of the only embedded scripting language designed from the ground up to directly target C++ and take advantage of modern C++ development techniques, working with the developer like he expects it to work."
                   LANGUAGES CXX)

#add additional build options
option(MULTITHREAD_SUPPORT_ENABLED "Enable Multithreaded Support"                            ON )
option(DYNLOAD_ENABLED             "Enable Dynamic Loading Support"                          ON )
option(BUILD_MODULES               "Build Extra Modules (stl)"                               ON )
option(BUILD_SAMPLES               "Build Samples Folder"                                    OFF)
option(RUN_FUZZY_TESTS             "Run tests generated by AFL"                              OFF)
option(USE_STD_MAKE_SHARED         "Use std::make_shared instead of chaiscript::make_shared" OFF)
option(RUN_PERFORMANCE_TESTS       "Run Performance Tests"                                   OFF)
#set options to only show in the advanced menu
mark_as_advanced(USE_STD_MAKE_SHARED)

#add even more build options if using clang or gcc
if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR "${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
  #add coverage reporting
  option(ENABLE_COVERAGE "Enable Coverage Reporting" OFF)
  if(ENABLE_COVERAGE)
    add_compile_options(--coverage -O0)
    add_link_options(--coverage)
  endif()

  #add thread sanitizer
  option(ENABLE_THREAD_SANITIZER "Enable thread sanitizer" OFF)
  if(ENABLE_THREAD_SANITIZER)
    add_compile_options(-fsanitize=thread -g)
    add_link_options(-fsanitize=thread)
  endif()

  #add address sanitizer
  option(ENABLE_ADDRESS_SANITIZER "Enable address sanitizer " OFF)
  if(ENABLE_ADDRESS_SANITIZER)
    add_compile_options(-fsanitize=address -g)
    add_link_options(-fsanitize=address)
    option(BUILD_LIBFUZZ_TESTER "Build libfuzzer tool" FALSE)
  endif()

  #add memory sanitizer
  option(ENABLE_MEMORY_SANITIZER "Enable memory sanitizer" OFF)
  if(ENABLE_MEMORY_SANITIZER)
    add_compile_options(-fsanitize=memory -fsanitize-memory-track-origins -g)
    add_link_options(-fsanitize=memory -fsanitize-memory-track-origins)
  endif()

  #add undefined behavior sanitizer
  option(ENABLE_UNDEFINED_SANITIZER "Enable undefined behavior sanitizer" OFF)
  if(ENABLE_UNDEFINED_SANITIZER)
    add_compile_options(-fsanitize=undefined -g)
    add_link_options(-fsanitize=undefined)
  endif()

  #add link time optimization
  option(ENABLE_LTO "Enable Link Time Optimization" OFF)
  if (ENABLE_LTO)
    add_compile_options(-flto)
    add_link_options(-flto)
  endif()

  #add gprof
  option(GPROF_OUTPUT "Generate profile data" OFF)
  if (GPROF_OUTPUT)
    add_compile_options(-pg)
    add_link_options(-pg)
  endif()

  #add fprofile
  option(PROFILE_GENERATE "Generate profile data" OFF)
  if (PROFILE_GENERATE)
    add_compile_options(-fprofile-generate)
    add_link_options(-fprofile-generate)
  endif()

  #use profile data
  option(PROFILE_USE "Use profile data" OFF)
  if (PROFILE_USE)
    add_compile_options(-fprofile-use)
    add_link_options(-fprofile-use)
  endif()
endif()

#add library interface
add_library(chaiscript INTERFACE)
#add header files
target_include_directories(chaiscript INTERFACE ${CMAKE_CURRENT_SOURCE_DIR}/include)

#add preprocessor directive if necessary
if(USE_STD_MAKE_SHARED)
  add_definitions(-DCHAISCRIPT_USE_STD_MAKE_SHARED)
endif()
